// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DAOCreated extends ethereum.Event {
  get params(): DAOCreated__Params {
    return new DAOCreated__Params(this);
  }
}

export class DAOCreated__Params {
  _event: DAOCreated;

  constructor(event: DAOCreated) {
    this._event = event;
  }

  get _address(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _name(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class DaoFactory extends ethereum.SmartContract {
  static bind(address: Address): DaoFactory {
    return new DaoFactory("DaoFactory", address);
  }

  ETH_TOKEN(): Address {
    let result = super.call("ETH_TOKEN", "ETH_TOKEN():(address)", []);

    return result[0].toAddress();
  }

  try_ETH_TOKEN(): ethereum.CallResult<Address> {
    let result = super.tryCall("ETH_TOKEN", "ETH_TOKEN():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  FINANCING(): Bytes {
    let result = super.call("FINANCING", "FINANCING():(bytes32)", []);

    return result[0].toBytes();
  }

  try_FINANCING(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("FINANCING", "FINANCING():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  GUILD(): Address {
    let result = super.call("GUILD", "GUILD():(address)", []);

    return result[0].toAddress();
  }

  try_GUILD(): ethereum.CallResult<Address> {
    let result = super.tryCall("GUILD", "GUILD():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  GUILDKICK(): Bytes {
    let result = super.call("GUILDKICK", "GUILDKICK():(bytes32)", []);

    return result[0].toBytes();
  }

  try_GUILDKICK(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("GUILDKICK", "GUILDKICK():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  LOCKED_LOOT(): Address {
    let result = super.call("LOCKED_LOOT", "LOCKED_LOOT():(address)", []);

    return result[0].toAddress();
  }

  try_LOCKED_LOOT(): ethereum.CallResult<Address> {
    let result = super.tryCall("LOCKED_LOOT", "LOCKED_LOOT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  LOOT(): Address {
    let result = super.call("LOOT", "LOOT():(address)", []);

    return result[0].toAddress();
  }

  try_LOOT(): ethereum.CallResult<Address> {
    let result = super.tryCall("LOOT", "LOOT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  MANAGING(): Bytes {
    let result = super.call("MANAGING", "MANAGING():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MANAGING(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MANAGING", "MANAGING():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  NONVOTING_ONBOARDING(): Bytes {
    let result = super.call(
      "NONVOTING_ONBOARDING",
      "NONVOTING_ONBOARDING():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_NONVOTING_ONBOARDING(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "NONVOTING_ONBOARDING",
      "NONVOTING_ONBOARDING():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ONBOARDING(): Bytes {
    let result = super.call("ONBOARDING", "ONBOARDING():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ONBOARDING(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ONBOARDING", "ONBOARDING():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RAGEQUIT(): Bytes {
    let result = super.call("RAGEQUIT", "RAGEQUIT():(bytes32)", []);

    return result[0].toBytes();
  }

  try_RAGEQUIT(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("RAGEQUIT", "RAGEQUIT():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SHARES(): Address {
    let result = super.call("SHARES", "SHARES():(address)", []);

    return result[0].toAddress();
  }

  try_SHARES(): ethereum.CallResult<Address> {
    let result = super.tryCall("SHARES", "SHARES():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  TOTAL(): Address {
    let result = super.call("TOTAL", "TOTAL():(address)", []);

    return result[0].toAddress();
  }

  try_TOTAL(): ethereum.CallResult<Address> {
    let result = super.tryCall("TOTAL", "TOTAL():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  VOTING(): Bytes {
    let result = super.call("VOTING", "VOTING():(bytes32)", []);

    return result[0].toBytes();
  }

  try_VOTING(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("VOTING", "VOTING():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  addresses(param0: Bytes): Address {
    let result = super.call("addresses", "addresses(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toAddress();
  }

  try_addresses(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("addresses", "addresses(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  daos(param0: Address): Bytes {
    let result = super.call("daos", "daos(address):(bytes32)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBytes();
  }

  try_daos(param0: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall("daos", "daos(address):(bytes32)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  identityAddress(): Address {
    let result = super.call(
      "identityAddress",
      "identityAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_identityAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "identityAddress",
      "identityAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDaoAddress(daoName: string): Address {
    let result = super.call(
      "getDaoAddress",
      "getDaoAddress(string):(address)",
      [ethereum.Value.fromString(daoName)]
    );

    return result[0].toAddress();
  }

  try_getDaoAddress(daoName: string): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDaoAddress",
      "getDaoAddress(string):(address)",
      [ethereum.Value.fromString(daoName)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _identityAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateDaoCall extends ethereum.Call {
  get inputs(): CreateDaoCall__Inputs {
    return new CreateDaoCall__Inputs(this);
  }

  get outputs(): CreateDaoCall__Outputs {
    return new CreateDaoCall__Outputs(this);
  }
}

export class CreateDaoCall__Inputs {
  _call: CreateDaoCall;

  constructor(call: CreateDaoCall) {
    this._call = call;
  }

  get daoName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get keys(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get finalizeDao(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class CreateDaoCall__Outputs {
  _call: CreateDaoCall;

  constructor(call: CreateDaoCall) {
    this._call = call;
  }
}

export class ConfigureDaoCall extends ethereum.Call {
  get inputs(): ConfigureDaoCall__Inputs {
    return new ConfigureDaoCall__Inputs(this);
  }

  get outputs(): ConfigureDaoCall__Outputs {
    return new ConfigureDaoCall__Outputs(this);
  }
}

export class ConfigureDaoCall__Inputs {
  _call: ConfigureDaoCall;

  constructor(call: ConfigureDaoCall) {
    this._call = call;
  }

  get daoAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get keys(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get finalizeDao(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class ConfigureDaoCall__Outputs {
  _call: ConfigureDaoCall;

  constructor(call: ConfigureDaoCall) {
    this._call = call;
  }
}

export class AddAdaptersCall extends ethereum.Call {
  get inputs(): AddAdaptersCall__Inputs {
    return new AddAdaptersCall__Inputs(this);
  }

  get outputs(): AddAdaptersCall__Outputs {
    return new AddAdaptersCall__Outputs(this);
  }
}

export class AddAdaptersCall__Inputs {
  _call: AddAdaptersCall;

  constructor(call: AddAdaptersCall) {
    this._call = call;
  }

  get dao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get adapters(): Array<AddAdaptersCallAdaptersStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      AddAdaptersCallAdaptersStruct
    >();
  }
}

export class AddAdaptersCall__Outputs {
  _call: AddAdaptersCall;

  constructor(call: AddAdaptersCall) {
    this._call = call;
  }
}

export class AddAdaptersCallAdaptersStruct extends ethereum.Tuple {
  get id(): Bytes {
    return this[0].toBytes();
  }

  get addr(): Address {
    return this[1].toAddress();
  }

  get flags(): BigInt {
    return this[2].toBigInt();
  }
}

export class UpdateAdapterCall extends ethereum.Call {
  get inputs(): UpdateAdapterCall__Inputs {
    return new UpdateAdapterCall__Inputs(this);
  }

  get outputs(): UpdateAdapterCall__Outputs {
    return new UpdateAdapterCall__Outputs(this);
  }
}

export class UpdateAdapterCall__Inputs {
  _call: UpdateAdapterCall;

  constructor(call: UpdateAdapterCall) {
    this._call = call;
  }

  get dao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get adapter(): UpdateAdapterCallAdapterStruct {
    return this._call.inputValues[1].value.toTuple() as UpdateAdapterCallAdapterStruct;
  }
}

export class UpdateAdapterCall__Outputs {
  _call: UpdateAdapterCall;

  constructor(call: UpdateAdapterCall) {
    this._call = call;
  }
}

export class UpdateAdapterCallAdapterStruct extends ethereum.Tuple {
  get id(): Bytes {
    return this[0].toBytes();
  }

  get addr(): Address {
    return this[1].toAddress();
  }

  get flags(): BigInt {
    return this[2].toBigInt();
  }
}
