// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class VotingContract__votesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class VotingContract extends ethereum.SmartContract {
  static bind(address: Address): VotingContract {
    return new VotingContract("VotingContract", address);
  }

  ADAPTER_NAME(): string {
    let result = super.call("ADAPTER_NAME", "ADAPTER_NAME():(string)", []);

    return result[0].toString();
  }

  try_ADAPTER_NAME(): ethereum.CallResult<string> {
    let result = super.tryCall("ADAPTER_NAME", "ADAPTER_NAME():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getFlag(flags: BigInt, flag: BigInt): boolean {
    let result = super.call("getFlag", "getFlag(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(flags),
      ethereum.Value.fromUnsignedBigInt(flag)
    ]);

    return result[0].toBoolean();
  }

  try_getFlag(flags: BigInt, flag: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("getFlag", "getFlag(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(flags),
      ethereum.Value.fromUnsignedBigInt(flag)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setFlag(flags: BigInt, flag: BigInt, value: boolean): BigInt {
    let result = super.call(
      "setFlag",
      "setFlag(uint256,uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(flags),
        ethereum.Value.fromUnsignedBigInt(flag),
        ethereum.Value.fromBoolean(value)
      ]
    );

    return result[0].toBigInt();
  }

  try_setFlag(
    flags: BigInt,
    flag: BigInt,
    value: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "setFlag",
      "setFlag(uint256,uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(flags),
        ethereum.Value.fromUnsignedBigInt(flag),
        ethereum.Value.fromBoolean(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votes(param0: Address, param1: Bytes): VotingContract__votesResult {
    let result = super.call(
      "votes",
      "votes(address,bytes32):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );

    return new VotingContract__votesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_votes(
    param0: Address,
    param1: Bytes
  ): ethereum.CallResult<VotingContract__votesResult> {
    let result = super.tryCall(
      "votes",
      "votes(address,bytes32):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new VotingContract__votesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getAdapterName(): string {
    let result = super.call("getAdapterName", "getAdapterName():(string)", []);

    return result[0].toString();
  }

  try_getAdapterName(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getAdapterName",
      "getAdapterName():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getSenderAddress(
    param0: Address,
    param1: Address,
    param2: Bytes,
    sender: Address
  ): Address {
    let result = super.call(
      "getSenderAddress",
      "getSenderAddress(address,address,bytes,address):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromBytes(param2),
        ethereum.Value.fromAddress(sender)
      ]
    );

    return result[0].toAddress();
  }

  try_getSenderAddress(
    param0: Address,
    param1: Address,
    param2: Bytes,
    sender: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSenderAddress",
      "getSenderAddress(address,address,bytes,address):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromBytes(param2),
        ethereum.Value.fromAddress(sender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  voteResult(dao: Address, proposalId: Bytes): i32 {
    let result = super.call(
      "voteResult",
      "voteResult(address,bytes32):(uint8)",
      [
        ethereum.Value.fromAddress(dao),
        ethereum.Value.fromFixedBytes(proposalId)
      ]
    );

    return result[0].toI32();
  }

  try_voteResult(dao: Address, proposalId: Bytes): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "voteResult",
      "voteResult(address,bytes32):(uint8)",
      [
        ethereum.Value.fromAddress(dao),
        ethereum.Value.fromFixedBytes(proposalId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }
}

export class ConfigureDaoCall extends ethereum.Call {
  get inputs(): ConfigureDaoCall__Inputs {
    return new ConfigureDaoCall__Inputs(this);
  }

  get outputs(): ConfigureDaoCall__Outputs {
    return new ConfigureDaoCall__Outputs(this);
  }
}

export class ConfigureDaoCall__Inputs {
  _call: ConfigureDaoCall;

  constructor(call: ConfigureDaoCall) {
    this._call = call;
  }

  get dao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get votingPeriod(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get gracePeriod(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConfigureDaoCall__Outputs {
  _call: ConfigureDaoCall;

  constructor(call: ConfigureDaoCall) {
    this._call = call;
  }
}

export class StartNewVotingForProposalCall extends ethereum.Call {
  get inputs(): StartNewVotingForProposalCall__Inputs {
    return new StartNewVotingForProposalCall__Inputs(this);
  }

  get outputs(): StartNewVotingForProposalCall__Outputs {
    return new StartNewVotingForProposalCall__Outputs(this);
  }
}

export class StartNewVotingForProposalCall__Inputs {
  _call: StartNewVotingForProposalCall;

  constructor(call: StartNewVotingForProposalCall) {
    this._call = call;
  }

  get dao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get proposalId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class StartNewVotingForProposalCall__Outputs {
  _call: StartNewVotingForProposalCall;

  constructor(call: StartNewVotingForProposalCall) {
    this._call = call;
  }
}

export class SubmitVoteCall extends ethereum.Call {
  get inputs(): SubmitVoteCall__Inputs {
    return new SubmitVoteCall__Inputs(this);
  }

  get outputs(): SubmitVoteCall__Outputs {
    return new SubmitVoteCall__Outputs(this);
  }
}

export class SubmitVoteCall__Inputs {
  _call: SubmitVoteCall;

  constructor(call: SubmitVoteCall) {
    this._call = call;
  }

  get dao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get proposalId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get voteValue(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SubmitVoteCall__Outputs {
  _call: SubmitVoteCall;

  constructor(call: SubmitVoteCall) {
    this._call = call;
  }
}
