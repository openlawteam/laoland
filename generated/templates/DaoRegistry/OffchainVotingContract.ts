// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OffchainVotingContract__votesResult {
  value0: BigInt;
  value1: Bytes;
  value2: Address;
  value3: Bytes;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: boolean;
  value11: BigInt;

  constructor(
    value0: BigInt,
    value1: Bytes,
    value2: Address,
    value3: Bytes,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: boolean,
    value11: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromFixedBytes(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromBoolean(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    return map;
  }
}

export class OffchainVotingContract__hashVotingResultNodeInputNodeStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }

  get nbNo(): BigInt {
    return this[2].toBigInt();
  }

  get nbYes(): BigInt {
    return this[3].toBigInt();
  }

  get sig(): Bytes {
    return this[4].toBytes();
  }

  get rootSig(): Bytes {
    return this[5].toBytes();
  }

  get index(): BigInt {
    return this[6].toBigInt();
  }

  get choice(): BigInt {
    return this[7].toBigInt();
  }

  get proposalHash(): Bytes {
    return this[8].toBytes();
  }

  get proof(): Array<Bytes> {
    return this[9].toBytesArray();
  }
}

export class OffchainVotingContract__nodeHashInputNodeStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }

  get nbNo(): BigInt {
    return this[2].toBigInt();
  }

  get nbYes(): BigInt {
    return this[3].toBigInt();
  }

  get sig(): Bytes {
    return this[4].toBytes();
  }

  get rootSig(): Bytes {
    return this[5].toBytes();
  }

  get index(): BigInt {
    return this[6].toBigInt();
  }

  get choice(): BigInt {
    return this[7].toBigInt();
  }

  get proposalHash(): Bytes {
    return this[8].toBytes();
  }

  get proof(): Array<Bytes> {
    return this[9].toBytesArray();
  }
}

export class OffchainVotingContract extends ethereum.SmartContract {
  static bind(address: Address): OffchainVotingContract {
    return new OffchainVotingContract("OffchainVotingContract", address);
  }

  ADAPTER_NAME(): string {
    let result = super.call("ADAPTER_NAME", "ADAPTER_NAME():(string)", []);

    return result[0].toString();
  }

  try_ADAPTER_NAME(): ethereum.CallResult<string> {
    let result = super.tryCall("ADAPTER_NAME", "ADAPTER_NAME():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  EIP712_DOMAIN(): string {
    let result = super.call("EIP712_DOMAIN", "EIP712_DOMAIN():(string)", []);

    return result[0].toString();
  }

  try_EIP712_DOMAIN(): ethereum.CallResult<string> {
    let result = super.tryCall("EIP712_DOMAIN", "EIP712_DOMAIN():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  EIP712_DOMAIN_TYPEHASH(): Bytes {
    let result = super.call(
      "EIP712_DOMAIN_TYPEHASH",
      "EIP712_DOMAIN_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_EIP712_DOMAIN_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "EIP712_DOMAIN_TYPEHASH",
      "EIP712_DOMAIN_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  VOTE_RESULT_NODE_TYPE(): string {
    let result = super.call(
      "VOTE_RESULT_NODE_TYPE",
      "VOTE_RESULT_NODE_TYPE():(string)",
      []
    );

    return result[0].toString();
  }

  try_VOTE_RESULT_NODE_TYPE(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "VOTE_RESULT_NODE_TYPE",
      "VOTE_RESULT_NODE_TYPE():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  VOTE_RESULT_NODE_TYPEHASH(): Bytes {
    let result = super.call(
      "VOTE_RESULT_NODE_TYPEHASH",
      "VOTE_RESULT_NODE_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_VOTE_RESULT_NODE_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "VOTE_RESULT_NODE_TYPEHASH",
      "VOTE_RESULT_NODE_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  VOTE_RESULT_ROOT_TYPE(): string {
    let result = super.call(
      "VOTE_RESULT_ROOT_TYPE",
      "VOTE_RESULT_ROOT_TYPE():(string)",
      []
    );

    return result[0].toString();
  }

  try_VOTE_RESULT_ROOT_TYPE(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "VOTE_RESULT_ROOT_TYPE",
      "VOTE_RESULT_ROOT_TYPE():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  VOTE_RESULT_ROOT_TYPEHASH(): Bytes {
    let result = super.call(
      "VOTE_RESULT_ROOT_TYPEHASH",
      "VOTE_RESULT_ROOT_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_VOTE_RESULT_ROOT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "VOTE_RESULT_ROOT_TYPEHASH",
      "VOTE_RESULT_ROOT_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  domainSeparator(dao: Address, chainId: BigInt, actionId: Address): Bytes {
    let result = super.call(
      "domainSeparator",
      "domainSeparator(address,uint256,address):(bytes32)",
      [
        ethereum.Value.fromAddress(dao),
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromAddress(actionId)
      ]
    );

    return result[0].toBytes();
  }

  try_domainSeparator(
    dao: Address,
    chainId: BigInt,
    actionId: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "domainSeparator",
      "domainSeparator(address,uint256,address):(bytes32)",
      [
        ethereum.Value.fromAddress(dao),
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromAddress(actionId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  fallbackVoting(): Address {
    let result = super.call("fallbackVoting", "fallbackVoting():(address)", []);

    return result[0].toAddress();
  }

  try_fallbackVoting(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "fallbackVoting",
      "fallbackVoting():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFlag(flags: BigInt, flag: BigInt): boolean {
    let result = super.call("getFlag", "getFlag(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(flags),
      ethereum.Value.fromUnsignedBigInt(flag)
    ]);

    return result[0].toBoolean();
  }

  try_getFlag(flags: BigInt, flag: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("getFlag", "getFlag(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(flags),
      ethereum.Value.fromUnsignedBigInt(flag)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hashMessage(
    dao: Address,
    chainId: BigInt,
    actionId: Address,
    message: Bytes
  ): Bytes {
    let result = super.call(
      "hashMessage",
      "hashMessage(address,uint256,address,bytes32):(bytes32)",
      [
        ethereum.Value.fromAddress(dao),
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromAddress(actionId),
        ethereum.Value.fromFixedBytes(message)
      ]
    );

    return result[0].toBytes();
  }

  try_hashMessage(
    dao: Address,
    chainId: BigInt,
    actionId: Address,
    message: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashMessage",
      "hashMessage(address,uint256,address,bytes32):(bytes32)",
      [
        ethereum.Value.fromAddress(dao),
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromAddress(actionId),
        ethereum.Value.fromFixedBytes(message)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  recover(hash: Bytes, sig: Bytes): Address {
    let result = super.call("recover", "recover(bytes32,bytes):(address)", [
      ethereum.Value.fromFixedBytes(hash),
      ethereum.Value.fromBytes(sig)
    ]);

    return result[0].toAddress();
  }

  try_recover(hash: Bytes, sig: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("recover", "recover(bytes32,bytes):(address)", [
      ethereum.Value.fromFixedBytes(hash),
      ethereum.Value.fromBytes(sig)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  setFlag(flags: BigInt, flag: BigInt, value: boolean): BigInt {
    let result = super.call(
      "setFlag",
      "setFlag(uint256,uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(flags),
        ethereum.Value.fromUnsignedBigInt(flag),
        ethereum.Value.fromBoolean(value)
      ]
    );

    return result[0].toBigInt();
  }

  try_setFlag(
    flags: BigInt,
    flag: BigInt,
    value: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "setFlag",
      "setFlag(uint256,uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(flags),
        ethereum.Value.fromUnsignedBigInt(flag),
        ethereum.Value.fromBoolean(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votes(param0: Address, param1: Bytes): OffchainVotingContract__votesResult {
    let result = super.call(
      "votes",
      "votes(address,bytes32):(uint256,bytes32,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );

    return new OffchainVotingContract__votesResult(
      result[0].toBigInt(),
      result[1].toBytes(),
      result[2].toAddress(),
      result[3].toBytes(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBoolean(),
      result[11].toBigInt()
    );
  }

  try_votes(
    param0: Address,
    param1: Bytes
  ): ethereum.CallResult<OffchainVotingContract__votesResult> {
    let result = super.tryCall(
      "votes",
      "votes(address,bytes32):(uint256,bytes32,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OffchainVotingContract__votesResult(
        value[0].toBigInt(),
        value[1].toBytes(),
        value[2].toAddress(),
        value[3].toBytes(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBoolean(),
        value[11].toBigInt()
      )
    );
  }

  hashResultRoot(dao: Address, actionId: Address, resultRoot: Bytes): Bytes {
    let result = super.call(
      "hashResultRoot",
      "hashResultRoot(address,address,bytes32):(bytes32)",
      [
        ethereum.Value.fromAddress(dao),
        ethereum.Value.fromAddress(actionId),
        ethereum.Value.fromFixedBytes(resultRoot)
      ]
    );

    return result[0].toBytes();
  }

  try_hashResultRoot(
    dao: Address,
    actionId: Address,
    resultRoot: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashResultRoot",
      "hashResultRoot(address,address,bytes32):(bytes32)",
      [
        ethereum.Value.fromAddress(dao),
        ethereum.Value.fromAddress(actionId),
        ethereum.Value.fromFixedBytes(resultRoot)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAdapterName(): string {
    let result = super.call("getAdapterName", "getAdapterName():(string)", []);

    return result[0].toString();
  }

  try_getAdapterName(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getAdapterName",
      "getAdapterName():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  hashVotingResultNode(
    node: OffchainVotingContract__hashVotingResultNodeInputNodeStruct
  ): Bytes {
    let result = super.call(
      "hashVotingResultNode",
      "hashVotingResultNode((address,uint256,uint256,uint256,bytes,bytes,uint256,uint256,bytes32,bytes32[])):(bytes32)",
      [ethereum.Value.fromTuple(node)]
    );

    return result[0].toBytes();
  }

  try_hashVotingResultNode(
    node: OffchainVotingContract__hashVotingResultNodeInputNodeStruct
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashVotingResultNode",
      "hashVotingResultNode((address,uint256,uint256,uint256,bytes,bytes,uint256,uint256,bytes32,bytes32[])):(bytes32)",
      [ethereum.Value.fromTuple(node)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  nodeHash(
    dao: Address,
    actionId: Address,
    node: OffchainVotingContract__nodeHashInputNodeStruct
  ): Bytes {
    let result = super.call(
      "nodeHash",
      "nodeHash(address,address,(address,uint256,uint256,uint256,bytes,bytes,uint256,uint256,bytes32,bytes32[])):(bytes32)",
      [
        ethereum.Value.fromAddress(dao),
        ethereum.Value.fromAddress(actionId),
        ethereum.Value.fromTuple(node)
      ]
    );

    return result[0].toBytes();
  }

  try_nodeHash(
    dao: Address,
    actionId: Address,
    node: OffchainVotingContract__nodeHashInputNodeStruct
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "nodeHash",
      "nodeHash(address,address,(address,uint256,uint256,uint256,bytes,bytes,uint256,uint256,bytes32,bytes32[])):(bytes32)",
      [
        ethereum.Value.fromAddress(dao),
        ethereum.Value.fromAddress(actionId),
        ethereum.Value.fromTuple(node)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getSenderAddress(
    dao: Address,
    actionId: Address,
    data: Bytes,
    param3: Address
  ): Address {
    let result = super.call(
      "getSenderAddress",
      "getSenderAddress(address,address,bytes,address):(address)",
      [
        ethereum.Value.fromAddress(dao),
        ethereum.Value.fromAddress(actionId),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromAddress(param3)
      ]
    );

    return result[0].toAddress();
  }

  try_getSenderAddress(
    dao: Address,
    actionId: Address,
    data: Bytes,
    param3: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSenderAddress",
      "getSenderAddress(address,address,bytes,address):(address)",
      [
        ethereum.Value.fromAddress(dao),
        ethereum.Value.fromAddress(actionId),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromAddress(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  voteResult(dao: Address, proposalId: Bytes): i32 {
    let result = super.call(
      "voteResult",
      "voteResult(address,bytes32):(uint8)",
      [
        ethereum.Value.fromAddress(dao),
        ethereum.Value.fromFixedBytes(proposalId)
      ]
    );

    return result[0].toI32();
  }

  try_voteResult(dao: Address, proposalId: Bytes): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "voteResult",
      "voteResult(address,bytes32):(uint8)",
      [
        ethereum.Value.fromAddress(dao),
        ethereum.Value.fromFixedBytes(proposalId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getSignedHash(snapshotRoot: Bytes, dao: Address, proposalId: Bytes): Bytes {
    let result = super.call(
      "getSignedHash",
      "getSignedHash(bytes32,address,bytes32):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(snapshotRoot),
        ethereum.Value.fromAddress(dao),
        ethereum.Value.fromFixedBytes(proposalId)
      ]
    );

    return result[0].toBytes();
  }

  try_getSignedHash(
    snapshotRoot: Bytes,
    dao: Address,
    proposalId: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getSignedHash",
      "getSignedHash(bytes32,address,bytes32):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(snapshotRoot),
        ethereum.Value.fromAddress(dao),
        ethereum.Value.fromFixedBytes(proposalId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getSignedAddress(
    snapshotRoot: Bytes,
    dao: Address,
    proposalId: Bytes,
    sig: Bytes
  ): Address {
    let result = super.call(
      "getSignedAddress",
      "getSignedAddress(bytes32,address,bytes32,bytes):(address)",
      [
        ethereum.Value.fromFixedBytes(snapshotRoot),
        ethereum.Value.fromAddress(dao),
        ethereum.Value.fromFixedBytes(proposalId),
        ethereum.Value.fromBytes(sig)
      ]
    );

    return result[0].toAddress();
  }

  try_getSignedAddress(
    snapshotRoot: Bytes,
    dao: Address,
    proposalId: Bytes,
    sig: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSignedAddress",
      "getSignedAddress(bytes32,address,bytes32,bytes):(address)",
      [
        ethereum.Value.fromFixedBytes(snapshotRoot),
        ethereum.Value.fromAddress(dao),
        ethereum.Value.fromFixedBytes(proposalId),
        ethereum.Value.fromBytes(sig)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  verify(root: Bytes, leaf: Bytes, proof: Array<Bytes>): boolean {
    let result = super.call(
      "verify",
      "verify(bytes32,bytes32,bytes32[]):(bool)",
      [
        ethereum.Value.fromFixedBytes(root),
        ethereum.Value.fromFixedBytes(leaf),
        ethereum.Value.fromFixedBytesArray(proof)
      ]
    );

    return result[0].toBoolean();
  }

  try_verify(
    root: Bytes,
    leaf: Bytes,
    proof: Array<Bytes>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verify",
      "verify(bytes32,bytes32,bytes32[]):(bool)",
      [
        ethereum.Value.fromFixedBytes(root),
        ethereum.Value.fromFixedBytes(leaf),
        ethereum.Value.fromFixedBytesArray(proof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _c(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _spc(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConfigureDaoCall extends ethereum.Call {
  get inputs(): ConfigureDaoCall__Inputs {
    return new ConfigureDaoCall__Inputs(this);
  }

  get outputs(): ConfigureDaoCall__Outputs {
    return new ConfigureDaoCall__Outputs(this);
  }
}

export class ConfigureDaoCall__Inputs {
  _call: ConfigureDaoCall;

  constructor(call: ConfigureDaoCall) {
    this._call = call;
  }

  get dao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get votingPeriod(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get gracePeriod(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get fallbackThreshold(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConfigureDaoCall__Outputs {
  _call: ConfigureDaoCall;

  constructor(call: ConfigureDaoCall) {
    this._call = call;
  }
}

export class SubmitVoteResultCall extends ethereum.Call {
  get inputs(): SubmitVoteResultCall__Inputs {
    return new SubmitVoteResultCall__Inputs(this);
  }

  get outputs(): SubmitVoteResultCall__Outputs {
    return new SubmitVoteResultCall__Outputs(this);
  }
}

export class SubmitVoteResultCall__Inputs {
  _call: SubmitVoteResultCall;

  constructor(call: SubmitVoteResultCall) {
    this._call = call;
  }

  get dao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get proposalId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get resultRoot(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get result(): SubmitVoteResultCallResultStruct {
    return this._call.inputValues[3].value.toTuple() as SubmitVoteResultCallResultStruct;
  }
}

export class SubmitVoteResultCall__Outputs {
  _call: SubmitVoteResultCall;

  constructor(call: SubmitVoteResultCall) {
    this._call = call;
  }
}

export class SubmitVoteResultCallResultStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }

  get nbNo(): BigInt {
    return this[2].toBigInt();
  }

  get nbYes(): BigInt {
    return this[3].toBigInt();
  }

  get sig(): Bytes {
    return this[4].toBytes();
  }

  get rootSig(): Bytes {
    return this[5].toBytes();
  }

  get index(): BigInt {
    return this[6].toBigInt();
  }

  get choice(): BigInt {
    return this[7].toBigInt();
  }

  get proposalHash(): Bytes {
    return this[8].toBytes();
  }

  get proof(): Array<Bytes> {
    return this[9].toBytesArray();
  }
}

export class StartNewVotingForProposalCall extends ethereum.Call {
  get inputs(): StartNewVotingForProposalCall__Inputs {
    return new StartNewVotingForProposalCall__Inputs(this);
  }

  get outputs(): StartNewVotingForProposalCall__Outputs {
    return new StartNewVotingForProposalCall__Outputs(this);
  }
}

export class StartNewVotingForProposalCall__Inputs {
  _call: StartNewVotingForProposalCall;

  constructor(call: StartNewVotingForProposalCall) {
    this._call = call;
  }

  get dao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get proposalId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class StartNewVotingForProposalCall__Outputs {
  _call: StartNewVotingForProposalCall;

  constructor(call: StartNewVotingForProposalCall) {
    this._call = call;
  }
}

export class RequestFallbackCall extends ethereum.Call {
  get inputs(): RequestFallbackCall__Inputs {
    return new RequestFallbackCall__Inputs(this);
  }

  get outputs(): RequestFallbackCall__Outputs {
    return new RequestFallbackCall__Outputs(this);
  }
}

export class RequestFallbackCall__Inputs {
  _call: RequestFallbackCall;

  constructor(call: RequestFallbackCall) {
    this._call = call;
  }

  get dao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get proposalId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class RequestFallbackCall__Outputs {
  _call: RequestFallbackCall;

  constructor(call: RequestFallbackCall) {
    this._call = call;
  }
}
