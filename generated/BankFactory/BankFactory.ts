// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BankCreated extends ethereum.Event {
  get params(): BankCreated__Params {
    return new BankCreated__Params(this);
  }
}

export class BankCreated__Params {
  _event: BankCreated;

  constructor(event: BankCreated) {
    this._event = event;
  }

  get bankAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class BankFactory extends ethereum.SmartContract {
  static bind(address: Address): BankFactory {
    return new BankFactory("BankFactory", address);
  }

  BANK(): Bytes {
    let result = super.call("BANK", "BANK():(bytes32)", []);

    return result[0].toBytes();
  }

  try_BANK(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("BANK", "BANK():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  CONFIGURATION(): Bytes {
    let result = super.call("CONFIGURATION", "CONFIGURATION():(bytes32)", []);

    return result[0].toBytes();
  }

  try_CONFIGURATION(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONFIGURATION",
      "CONFIGURATION():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ETH_TOKEN(): Address {
    let result = super.call("ETH_TOKEN", "ETH_TOKEN():(address)", []);

    return result[0].toAddress();
  }

  try_ETH_TOKEN(): ethereum.CallResult<Address> {
    let result = super.tryCall("ETH_TOKEN", "ETH_TOKEN():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  EXECUTION(): Bytes {
    let result = super.call("EXECUTION", "EXECUTION():(bytes32)", []);

    return result[0].toBytes();
  }

  try_EXECUTION(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("EXECUTION", "EXECUTION():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  FINANCING(): Bytes {
    let result = super.call("FINANCING", "FINANCING():(bytes32)", []);

    return result[0].toBytes();
  }

  try_FINANCING(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("FINANCING", "FINANCING():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  GUILD(): Address {
    let result = super.call("GUILD", "GUILD():(address)", []);

    return result[0].toAddress();
  }

  try_GUILD(): ethereum.CallResult<Address> {
    let result = super.tryCall("GUILD", "GUILD():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  GUILDKICK(): Bytes {
    let result = super.call("GUILDKICK", "GUILDKICK():(bytes32)", []);

    return result[0].toBytes();
  }

  try_GUILDKICK(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("GUILDKICK", "GUILDKICK():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  LOCKED_LOOT(): Address {
    let result = super.call("LOCKED_LOOT", "LOCKED_LOOT():(address)", []);

    return result[0].toAddress();
  }

  try_LOCKED_LOOT(): ethereum.CallResult<Address> {
    let result = super.tryCall("LOCKED_LOOT", "LOCKED_LOOT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  LOOT(): Address {
    let result = super.call("LOOT", "LOOT():(address)", []);

    return result[0].toAddress();
  }

  try_LOOT(): ethereum.CallResult<Address> {
    let result = super.tryCall("LOOT", "LOOT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  MANAGING(): Bytes {
    let result = super.call("MANAGING", "MANAGING():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MANAGING(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MANAGING", "MANAGING():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  NONVOTING_ONBOARDING(): Bytes {
    let result = super.call(
      "NONVOTING_ONBOARDING",
      "NONVOTING_ONBOARDING():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_NONVOTING_ONBOARDING(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "NONVOTING_ONBOARDING",
      "NONVOTING_ONBOARDING():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ONBOARDING(): Bytes {
    let result = super.call("ONBOARDING", "ONBOARDING():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ONBOARDING(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ONBOARDING", "ONBOARDING():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RAGEQUIT(): Bytes {
    let result = super.call("RAGEQUIT", "RAGEQUIT():(bytes32)", []);

    return result[0].toBytes();
  }

  try_RAGEQUIT(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("RAGEQUIT", "RAGEQUIT():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SHARES(): Address {
    let result = super.call("SHARES", "SHARES():(address)", []);

    return result[0].toAddress();
  }

  try_SHARES(): ethereum.CallResult<Address> {
    let result = super.tryCall("SHARES", "SHARES():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  TOTAL(): Address {
    let result = super.call("TOTAL", "TOTAL():(address)", []);

    return result[0].toAddress();
  }

  try_TOTAL(): ethereum.CallResult<Address> {
    let result = super.tryCall("TOTAL", "TOTAL():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  VOTING(): Bytes {
    let result = super.call("VOTING", "VOTING():(bytes32)", []);

    return result[0].toBytes();
  }

  try_VOTING(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("VOTING", "VOTING():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getFlag(flags: BigInt, flag: BigInt): boolean {
    let result = super.call("getFlag", "getFlag(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(flags),
      ethereum.Value.fromUnsignedBigInt(flag)
    ]);

    return result[0].toBoolean();
  }

  try_getFlag(flags: BigInt, flag: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("getFlag", "getFlag(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(flags),
      ethereum.Value.fromUnsignedBigInt(flag)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  identityAddress(): Address {
    let result = super.call(
      "identityAddress",
      "identityAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_identityAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "identityAddress",
      "identityAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  setFlag(flags: BigInt, flag: BigInt, value: boolean): BigInt {
    let result = super.call(
      "setFlag",
      "setFlag(uint256,uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(flags),
        ethereum.Value.fromUnsignedBigInt(flag),
        ethereum.Value.fromBoolean(value)
      ]
    );

    return result[0].toBigInt();
  }

  try_setFlag(
    flags: BigInt,
    flag: BigInt,
    value: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "setFlag",
      "setFlag(uint256,uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(flags),
        ethereum.Value.fromUnsignedBigInt(flag),
        ethereum.Value.fromBoolean(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _identityAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateBankCall extends ethereum.Call {
  get inputs(): CreateBankCall__Inputs {
    return new CreateBankCall__Inputs(this);
  }

  get outputs(): CreateBankCall__Outputs {
    return new CreateBankCall__Outputs(this);
  }
}

export class CreateBankCall__Inputs {
  _call: CreateBankCall;

  constructor(call: CreateBankCall) {
    this._call = call;
  }

  get dao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CreateBankCall__Outputs {
  _call: CreateBankCall;

  constructor(call: CreateBankCall) {
    this._call = call;
  }
}

export class ConfigureAdadpterCall extends ethereum.Call {
  get inputs(): ConfigureAdadpterCall__Inputs {
    return new ConfigureAdadpterCall__Inputs(this);
  }

  get outputs(): ConfigureAdadpterCall__Outputs {
    return new ConfigureAdadpterCall__Outputs(this);
  }
}

export class ConfigureAdadpterCall__Inputs {
  _call: ConfigureAdadpterCall;

  constructor(call: ConfigureAdadpterCall) {
    this._call = call;
  }

  get dao(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get bank(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get adapter(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get acl(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConfigureAdadpterCall__Outputs {
  _call: ConfigureAdadpterCall;

  constructor(call: ConfigureAdadpterCall) {
    this._call = call;
  }
}
